# Save all small tables into the R environment
list2env(small_tables_list, envir = .GlobalEnv)
# Check the count of each actor's appearances in 'Action_table'
actor_counts <- Action_table %>%
group_by(actor_1_name) %>%
summarise(count = n())
# Filter out actors with appearances less than 5
actors_to_remove <- actor_counts %>%
filter(count < 5) %>%
pull(actor_1_name)
# Remove rows with actors to be removed from 'Action_table'
Action_table_filtered <- Action_table %>%
filter(!actor_1_name %in% actors_to_remove)
# Display the first few rows of the filtered 'Action_table'
head(Action_table_filtered)
# Calculate the average imdb_score for each actor appearing more than 5 times
actor_avg_scores <- Action_table_filtered %>%
group_by(actor_1_name) %>%
summarise(imdb_actor = mean(imdb_score, na.rm = TRUE))
# Merge the actor_avg_scores back into 'Action_table_filtered'
Action_table_with_avg <- left_join(Action_table_filtered, actor_avg_scores, by = "actor_1_name")
# Display the first few rows of the merged table
head(Action_table_with_avg)
# Calculate the average imdb_score for each actor appearing more than 5 times
actor_avg_scores <- Action_table_filtered %>%
group_by(actor_1_name) %>%
summarise(
imdb_actor = ifelse(n() > 5, mean(imdb_score), NA_real_),
appearances = n()
) %>%
filter(!is.na(imdb_actor) & appearances == 1) %>%
select(actor_1_name, imdb_actor)
# Display the actor_avg_scores
head(actor_avg_scores)
# Calculate the average imdb_score for each actor appearing more than 5 times
actor_avg_scores <- Action_table_filtered %>%
group_by(actor_1_name) %>%
summarise(
imdb_actor = ifelse(n() > 5, mean(imdb_score), NA_real_),
appearances = n()
) %>%
filter(!is.na(imdb_actor) & appearances == 1) %>%
select(actor_1_name, imdb_actor)
# Display the actor_avg_scores
head(actor_avg_scores)
# Calculate the average imdb_score for each actor appearing more than 5 times
actor_avg_scores <- Action_table_filtered %>%
group_by(actor_1_name) %>%
summarise(imdb_actor = mean(imdb_score, na.rm = TRUE))
# Merge the actor_avg_scores back into 'Action_table_filtered'
Action_table_with_avg <- left_join(Action_table_filtered, actor_avg_scores, by = "actor_1_name")
# Display the first few rows of the merged table
head(Action_table_with_avg)
# Calculate the average imdb_score for each actor appearing more than 5 times
actor_avg_scores <- Action_table_filtered %>%
group_by(actor_1_name) %>%
summarise(imdb_actor = mean(imdb_score, na.rm = TRUE))
# Merge the actor_avg_scores back into 'Action_table_filtered'
Action_table_with_avg <- left_join(Action_table_filtered, actor_avg_scores, by = "actor_1_name")
# Display the first few rows of the merged table
head(Action_table_with_avg)
# Create a table with actor names, imdb_actor, and ranking
actor_ranking_table <- actor_avg_scores %>%
arrange(desc(imdb_actor)) %>%
mutate(ranking = row_number()) %>%
select(actor_1_name, imdb_actor, ranking)
# Display the actor_ranking_table
head(actor_ranking_table)
# Calculate the average imdb_score for each actor appearing more than 5 times
actor_avg_scores <- Action_table_filtered %>%
group_by(actor_1_name) %>%
summarise(imdb_actor = mean(imdb_score, na.rm = TRUE))
# Merge the actor_avg_scores back into 'Action_table_filtered'
Action_table_with_avg <- left_join(Action_table_filtered, actor_avg_scores, by = "actor_1_name")
# Display the first few rows of the merged table
head(Action_table_with_avg)
# Create a new table with actor names, IMDb scores, and rankings
actor_ranking_table <- Action_table_with_avg %>%
arrange(desc(imdb_actor)) %>%  # Order by IMDb scores in descending order
mutate(ranking = row_number()) %>%  # Add a ranking column
select(actor_1_name, imdb_actor, ranking) %>%  # Select desired columns
slice_head(n = 10)  # Take the top 10 rows
# Display the actor_ranking_table
head(actor_ranking_table)
# Calculate the average imdb_score for each actor appearing more than 5 times
actor_avg_scores <- Action_table_filtered %>%
group_by(actor_1_name) %>%
summarise(imdb_actor = mean(imdb_score, na.rm = TRUE))
# Merge the actor_avg_scores back into 'Action_table_filtered'
Action_table_with_avg <- left_join(Action_table_filtered, actor_avg_scores, by = "actor_1_name")
# Display the first few rows of the merged table
head(Action_table_with_avg)
# Create a table with actor names, imdb_actor, and ranking
actor_ranking_table <- actor_avg_scores %>%
arrange(desc(imdb_actor)) %>%
mutate(ranking = row_number()) %>%
select(actor_1_name, imdb_actor, ranking) %>%
filter(ranking <= 10)
# Display the actor_ranking_table
head(actor_ranking_table)
View(actor_ranking_table)
install.packages("viridis")
# Create a bar chart
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal()
library(rmdformats)
library(skimr)
library(readr)
library(dplyr)
library(anytime)
library(gt)
library(magrittr)
library(ggplot)
library(rmdformats)
library(skimr)
library(readr)
library(dplyr)
library(anytime)
library(gt)
library(magrittr)
library(ggplot2)
# Create a bar chart
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal()
# Display the bar chart
print(bar_chart)
# Create a bar chart
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal()
scale_y_continuous(limits = c(5, 8.5), breaks = seq(5, 8.5, by = 0.5))
# Display the bar chart
print(bar_chart)
# Create a bar chart
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
scale_y_continuous(limits = c(5, 8.5), breaks = seq(5, 8.5, by = 0.5))
# Display the modified bar chart
print(bar_chart)
print(actor_ranking_table)
# Create a bar chart
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
scale_y_continuous(limits = c(5, 8.5), breaks = seq(5, 8.5, by = 0.5))
# Display the modified bar chart
print(bar_chart)
# Inspect the structure of the data frame
str(actor_ranking_table)
# Create a bar chart with custom y-axis scale
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
scale_y_continuous(limits = c(5, 8.5), breaks = seq(5, 8.5, by = 0.5))
# Display the modified bar chart
print(bar_chart)
# Inspect the structure of the data frame
str(actor_ranking_table)
# Create a bar chart with custom y-axis scale
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
# Display the modified bar chart
print(bar_chart)
# Create a bar chart
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
scale_y_continuous(limits = c(5, 8.5), breaks = seq(5, 8.5, by = 0.5))
# Display the bar chart
print(bar_chart)
# Create a bar chart
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal()
scale_y_continuous(limits = c(5, 8.5), breaks = seq(5, 8.5, by = 0.5))
# Display the bar chart
print(bar_chart)
# Create a bar chart
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +  # Use a color scale (adjust as needed)
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
scale_y_continuous(limits = c(5, 8.5), breaks = seq(5, 8.5, by = 0.5))
# Display the bar chart
print(bar_chart)
# Create a bar chart
bar_chart <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
scale_y_continuous(limits = c(5, 8.5), breaks = seq(5, 8.5, by = 0.5)) +
facet_wrap(~actor_1_name, scales = "free")
# Display the modified bar chart
print(bar_chart)
# Create a bar chart with scaled y-axis
bar_chart_scaled <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
coord_cartesian(ylim = c(5, 9))  # Set y-axis limit
# Display the scaled bar chart
print(bar_chart_scaled)
# Create a bar chart with scaled y-axis
bar_chart_scaled <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
coord_cartesian(ylim = c(6, 9))  # Set y-axis limit
# Display the scaled bar chart
print(bar_chart_scaled)
# Create a bar chart with scaled y-axis
bar_chart_scaled <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
scale_fill_viridis_d() +
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
coord_cartesian(ylim = c(6, 8))  # Set y-axis limit
# Display the scaled bar chart
print(bar_chart_scaled)
# Create a bar chart with scaled y-axis
bar_chart_scaled <- ggplot(actor_ranking_table, aes(x = actor_1_name, y = imdb_actor, fill = factor(ranking))) +
geom_bar(stat = "identity", position = "dodge", width = 0.7) +
geom_text(aes(label = sprintf("%.2f", imdb_actor), y = imdb_actor), vjust = -0.5) +  # Add value labels
scale_fill_viridis_d() +
labs(
title = "Actor IMDb Scores and Rankings",
x = "Actor Name",
y = "Average IMDb Score",
fill = "Ranking"
) +
theme_minimal() +
coord_cartesian(ylim = c(6, 8))  # Set y-axis limit
# Display the scaled bar chart
print(bar_chart_scaled)
table(Movie.Data$genres)
View(Movie.Data)
# Extract genres from the 'genres' column (assuming they are separated by '|')
genres <- strsplit(as.character(Movie.Data$genres), "\\|", fixed = TRUE)
# Create a data frame with one row for each genre and the corresponding ranking
genres_df <- data.frame(genre = unlist(genres), ranking = rep(Movie.Data$ranking, sapply(genres, length)))
movies_data <- load("Movie.Data_Complete.RData")
# Extract genres from the 'genres' column (assuming they are separated by '|')
genres <- strsplit(as.character(Movie.Data$genres), "\\|", fixed = TRUE)
# Create a data frame with one row for each genre and the corresponding ranking
genres_df <- data.frame(genre = unlist(genres), ranking = rep(Movie.Data$ranking, sapply(genres, length)))
install.packages("tidyr")
movies_data <- load("Movie.Data_Complete.RData")
# Extract genres from the 'genres' column (assuming they are separated by '|')
genres <- strsplit(as.character(Movie.Data$genres), "\\|", fixed = TRUE)
# Create a data frame with one row for each genre and the corresponding ranking
genres_df <- data.frame(
genre = unlist(genres),
ranking = rep(Movie.Data$ranking, sapply(genres, length))
)
# Extract genres and rankings
genres_and_rankings <- Movie.Data %>%
select(genres, ranking) %>%
separate_rows(genres, sep = "\\|")
library(tidyr)
library(rmdformats)
library(skimr)
library(readr)
library(dplyr)
library(anytime)
library(gt)
library(magrittr)
library(ggplot2)
movies_data <- load("Movie.Data_Complete.RData")
# Extract genres and rankings
genres_and_rankings <- Movie.Data %>%
select(genres, ranking) %>%
separate_rows(genres, sep = "\\|")
# Extract individual genres from each row
all_genres <- str_split(Movie.Data$genres, "\\|") %>%
unlist()
library(tidyr)
library(rmdformats)
library(skimr)
library(readr)
library(dplyr)
library(anytime)
library(gt)
library(magrittr)
library(ggplot2)
library(stringr)
movies_data <- load("Movie.Data_Complete.RData")
# Extract individual genres from each row
all_genres <- str_split(Movie.Data$genres, "\\|") %>%
unlist()
# Create a data frame with the counts of each genre
genre_counts <- data.frame(genre = all_genres) %>%
group_by(genre) %>%
summarise(count = n()) %>%
arrange(desc(count))  # Arrange in descending order
# Select the top 10 genres
top_10_genres <- head(genre_counts, 10)
# Display the top 10 genres
print(top_10_genres)
View(Thriller_table)
rm(list=ls())
## Global options
knitr::opts_chunk$set(        # On définit ici les comportements par défaut des capsules dans le document produit html
echo=T,        # pour afficher les lignes de code (FALSE pour les cacher ; mais elles seront executer)
eval=TRUE,     # pour executer les capsules de code
message=FALSE, # pour que les messages de R ne soient pas affichés dans le doc html
warning=FALSE) # pour que les alertes de R ne soient pas affichés dans le doc html
knitr::opts_knit$set(width=75)
options(max.print="75")       # pour définir le nombre d'éléments afficher par R
## Libraries you need
## You may have to install these libraries first
## with the tab on bottom right panel : "Packages" ; click install
## or : install.packages("ggplot2")   - don't forget the ""
library(knitr)
library(rmdformats)
library(skimr)   #  to provide summary statistics
library(dplyr)
movies_data <- load("Movie.Data_Complete.RData")
rm(list=ls())
my_data <- load("mydata.RData")
View(my.data)
avg <- avg(my.data$a)
mean_data_a <- mean(my.data$a)
print(mean_data_a)
my_data_2 <- load("starwars.RData")
View(starwars)
sum(starwars$homeworld == "Naboo")
sum(my_data_2$homeworld == "Naboo")
num_naboo <- sum(my_data_2$homeworld == "Naboo")
num_naboo <- sum(starwars$homeworld == "Naboo")
sum(starwars$homeworld == "Naboo" & starwars$species == "Gungan")
num_naboo <- select(starwars$homeworld == "Naboo")
num_naboo <- mutate(starwars$homeworld == "Naboo")
num_naboo <- sum(starwars$homeworld == "Naboo")
num_naboo <- nrow(starwars_data[starwars_data$homeworld == "Naboo", ])
num_naboo <- nrow(starwars[starwars_data$homeworld == "Naboo", ])
num_naboo <- nrow(starwars[starwars$homeworld == "Naboo", ])
answer1 <- starwars_data %>%
filter(homeworld == "Naboo") %>%
nrow()
answer1 <- starwars %>%
filter(homeworld == "Naboo") %>%
nrow()
answer1 <- starwars %>%
filter(homeworld == "Naboo")
answer2 <- starwars_data %>%
filter(homeworld == "Naboo", species == "Gungan") %>%
nrow()
answer2 <- starwars %>%
filter(homeworld == "Naboo", species == "Gungan") %>%
nrow()
answer3 <- starwars_data %>%
filter(eye_color == "red", species != "Gungan", homeworld != "Naboo") %>%
nrow()
answer3 <- starwars %>%
filter(eye_color == "red", species != "Gungan", homeworld != "Naboo") %>%
nrow()
missing_values_height <- sum(is.na(starwars_data$height))
missing_values_height <- sum(is.na(starwars$height))
View(answer1)
## Global options
knitr::opts_chunk$set(        # On définit ici les comportements par défaut des capsules dans le document produit html
echo=T,        # pour afficher les lignes de code (FALSE pour les cacher ; mais elles seront executer)
eval=TRUE,     # pour executer les capsules de code
message=FALSE, # pour que les messages de R ne soient pas affichés dans le doc html
warning=FALSE) # pour que les alertes de R ne soient pas affichés dans le doc html
knitr::opts_knit$set(width=75)
options(max.print="75")       # pour définir le nombre d'éléments afficher par R
answer3 <- starwars %>%
filter(eye_color == "red", species != "Gungan" & homeworld != "Naboo") %>%
nrow()
my_data_2 <- load("starwars.RData")
answer3 <- starwars %>%
filter(eye_color == "red", species != "Gungan" & homeworld != "Naboo") %>%
nrow()
answer3 <- starwars %>%
filter(eye_color == "red", species != "Gungan" , homeworld != "Naboo") %>%
nrow()
my_data_2 <- load("starwars.RData")
answer3 <- starwars %>%
filter(eye_color == "red", species != "Gungan" , homeworld != "Naboo") %>%
nrow()
answer3 <- starwars %>%
filter(eye_color == "red", species != "Gungan", homeworld != "Naboo") %>%
nrow()
## Libraries you need
## You may have to install these libraries first
## with the tab on bottom right panel : "Packages" ; click install
## or : install.packages("ggplot2")   - don't forget the ""
library(knitr)
library(rmdformats)
library(skimr)   #  to provide summary statistics
library(dplyr)
answer3 <- starwars %>%
filter(eye_color == "red", species != "Gungan", homeworld != "Naboo") %>%
nrow()
answer3 <- starwars %>%
filter(eye_color == "red", species != "Gungan" & homeworld != "Naboo") %>%
nrow()
answer3 <- starwars %>%
filter(eye_color == "red", species != "Gungan" ! homeworld != "Naboo") %>%
?plot
?plot
## Global options
knitr::opts_chunk$set(        # On définit ici les comportements par défaut des capsules dans le document produit html
echo=T,        # pour afficher les lignes de code (FALSE pour les cacher ; mais elles seront executer)
eval=TRUE,     # pour executer les capsules de code
message=FALSE, # pour que les messages de R ne soient pas affichés dans le doc html
warning=FALSE) # pour que les alertes de R ne soient pas affichés dans le doc html
knitr::opts_knit$set(width=75)
options(max.print="75")       # pour définir le nombre d'éléments afficher par R
mean_data_a <- round(mean(my.data$a),3)
print(mean_data_a)
getwd()
setwd()
setwd("D:/3. INP/3. Data Analysis/Project")
setwd("D:/3. INP/3. Data Analysis/Project")
getwd()
